Python Development Environment
==============================

Install Python3
---------------

(update Xcode and ports first)

sudo port install python37
sudo port select --set python python37
sudo port select --set python3 python37

add [../3.7/bin] to PATH
(/opt/local/Library/Frameworks/Python.framework/Versions/3.7/bin:~/Library/Python/3.7/bin)

sudo port install py37-pip
sudo port select --set pip pip37
sudo port select --set pip3 pip37

python -m pip install —user --upgrade setuptools wheel twine pipenv virtualenv

Set Up Simulus Dev Environment
------------------------------

Under simulus project root directory:

pipenv clean
pipenv check
pipenv run pip freeze
pipenv install greenlet runstats
pipenv install pytest tox
pipenv install gitchangelog pystache
pipenv install jupyter sphinx nbsphinx pandoc
pipenv install [more packages when needed]
pipenv run pip freeze > ./dev-requirements.txt
pipenv shell
(simulus) pip install -e .


Packaging Instructions
======================

(change [version] in setup.py)
(change [__version__] in simulus/__init__.py)
git tag -a [version] -m [message]
gitchangelog > CHANGELOG.md
python setup.py sdist bdist_wheel
git add (all changed files)
git commit -m [message] --tags
python -m twine upload dist/simulus-[version]*


Fix Git Commit Messages (if necessary)
--------------------------------------

(1) git rebase -i HEAD~X (or root)
# move to the line of your commit, change pick into edit
(2) git commit --amend
# change the commit message for the
(3) git rebase —continue
# move to the next commit, repeat step 2 until success
(4) git push —f
# update the repository (make sure branch pretection is turned off)


Name Convention of Classes and Methods
======================================

Completely Hidden Classes
-------------------------

These classes should be completely hidden from the user. The user
should not even making a reference to the class objects.

The name of these classes starts and ends underscores (e.g.,
_EventList_). All methods and variables in the class can be named
without the need to begin with an underscore, since the class is
completely hidden from the user after all. However, there is an
exception: The subclasses from the hidden classes can be public. In
that case, to avoid confusion, the methods and variables in the hidden
base classes shall start with an underscore, unless they are to be
made available to the user.

Partially Hidden Classes
------------------------

The content of these classes should be hidden from the user. The user,
however, can get a reference to the class object (and should know what
it is). Since the content of the classes, including all variables and
methods therein, is supposed to be hidden from the user, the user
shall treat the class objects as opaque objects.

The name of these classes starts with an underscore (_). All methods
and variables in the class can be named without the need to begin with
an underscore, since the class is partially hidden from the user after
all.  However, there is an exception: The subclasses from the hidden
classes can be public. In that case, to avoid confusion, the methods
and variables in the hidden base classes shall start with an
underscore, unless they are to be made available to the user.

Public Classes
--------------

These classes are supposed to be a part of the user interface. All
public variables and methods therefore shall start without an
underscore. The hidden variables and methods, on the other hand,
should start with an underscore, to indicate that the user shall not
access them directly.

Constants
---------

All constants (classes or varables) are in CAPTITAL LETTERS.


List of Files, Classes and Methods
==================================

************
__init__.py:
************

*********
utils.py:
*********

* QDIS  # public interface
    * FIFO, LIFO, RANDOM, PRIORITY

* DataCollector  # public interface
    * __init__()
    * sample()
    * finalize()
    * report()

*************
trappable.py:
*************

* Trappable  # public interface
    * __init__()  # supposed hidden
    * _sim
    * retval
    * _try_wait()
    * _commit_wait()
    * _cancel_wait()
    * _true_trappable()

*******
trap.py
*******

* Trap  # public interface
    * __init__()  # supposedly hidden
    * state: TRAP_UNSET, TRAP_SET, TRAP_SPRUNG
    * blocked
    * wait()
    * trigger()
    * _try_wait()
    * _cancel_wait()

*************
semaphore.py:
*************

* Semaphore  # public interface
    * __init__()  # supposedly hidden
    * val
    * qdis: QDIS.*
    * blocked
    * wait()
    * signal()
    * trigger() == signal()
    * _next_unblock()
    * _try_wait()
    * _cancel_wait()

*********
event.py:
*********

* _MinEntry_  # completely hidden
* _MaxEntry_  # completely hidden
* _PQDict_  # completely hidden

* _Event  # partially hidden, opaque reference
    * __init__()
    * time
    * name
    * trap
    * __str__()
    * __lt__()
    * _try_wait()
    * _cancel_wait()
    * _true_trappable()

* _DirectEvent  # partially hidden, opaque reference
    * __init__()
    * func
    * params
    * repeat_intv
    * __str__()
    * renew()

* _ProcessEvent  # partially hidden, opaque reference
    * __init__()
    * proc
    * __str__()

* _EventList_  # completely hidden
    * __init__()
    * pqueue
    * last
    * __len__()
    * insert()
    * get_min()
    * delete_min()
    * cancel()
    * update()
    * current_event()

***********
process.py:
***********

* _Process  # partially hidden, opaque reference
    * __init__()
    * name
    * func
    * params
    * state: STATE_*
    * main
    * vert
    * priority
    * trap
    * acting_trappables
    * activate()
    * deactivate()
    * invoke()
    * run()
    * sleep()
    * suspend()
    * terminate()
    * _try_wait()
    * _cancel_wait()
    * _true_trappable()

********
sync.py:
********

* _Sync_:  # completely hidden
* sync()  # public interface

*************
simulator.py:
*************

* Simulator  # public interface
    * __init__()
    * name
    * now
    * _eventlist
    * _theproc
    * _readq
    * sched()
    * cancel()
    * resched()
    * process()
    * cur_process()
    * terminated()
    * get_priority()
    * set_priority()
    * kill()
    * sleep()
    * trap()
    * semaphore()
    * resource()
    * wait()
    * run()
    * step()
    * peek()
    * show_calendar()
    * _process_one_event()

* simulator()  # public interface

************
resource.py:
************

* Resource  # public interface
    * __init__()  # supposedly hidden
    * name
    * capacity
    * qdis
    * stats
    * _sem
    * _last_arrival
    * _arrivals
    * _services
    * acquire()
    * release()

*********
store.py:
*********

* Store  # public interface
    * __init__()  # supposedly hidden
    * capacity
    * level
    * name
    * stats
    * _p_sem
    * _c_sem
    * _last_p_arrival
    * _last_c_arrival
    * _p_arrivals
    * _c_arrivals
    * _obj_store
    * _obj_decided
    * get()
    * put()
    * getter()
    *   GetTrappable  # public interface
    *     __init__()  # supposedly hidden
    *     _store
    *     _amt
    *     _try_wait()
    *     _cancel_wait()
    *     _commit_wait()
    *     _true_trappable()
    * putter()
    *   PutTrappable  # public interface
    *     __init__()  # supposedly hidden
    *     _store
    *     _amt
    *     _obj
    *     _try_wait()
    *     _cancel_wait()
    *     _commit_wait()
    *     _true_trappable()
    * getters_in_queue()
    * putters_in_queue()



    
